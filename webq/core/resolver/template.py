HTML_HEADER = """<!DOCTYPE html>

<!-- Automatically generated by WebQ -->

"""


class TemplateResolver:
    def __init__(self, template):
        self.template = template

    def parse(self, **options):
        """ Convert template to HTML """

        self.tree = self.template.prepare(**options)

        result = HTML_HEADER

        for tagname, component in html:
            if not tagname:
                result += self.resolve_noncomponent(component)
            elif not component:
                result += tagname
            else:
                result += self.resolve_tagname(tagname[1:-1], component)

    def resolve_tagname(self, tagname, component):
        result = f"<{tagname}"
        for key, value in component.attributes.items():
            result += f' {key}="{value}"'
        result += ">\n"

        return result

    def resolve_noncomponent(self, value):
        if isinstance(value, str):
            return value
        elif hasattr(value, "render"):
            return value.render()
        else:
            return str(value)
